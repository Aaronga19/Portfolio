name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build-app:
    environment:
      name: portfol
    env:
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      EMAIL: ${{secrets.EMAIL}}
      PASS_EMAIL: ${{secrets.PASS_EMAIL}}
      AWS_ID: ${{secrets.AWS_ID}}
      AWS_ACCESS: ${{secrets.AWS_ACCESS}}
      AWS_NAME: ${{secrets.AWS_NAME}}
      
    services:
      postgres:
        image: postgres
        env: 
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: Pulling git repo
        uses: actions/checkout@v2 
      - name: Installing python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Updating pip
        run: python -m pip install --upgrade pip
      - name: Installing dependencies
        run: pip install -r requirements.txt
      - name: testing 
        run: python manage.py test
      - name: testing ends  
        run: echo Testing has finished 

      # - name: Test with pytest
      #   run: |
      #     pip install pytest
      #     pytest

      # DOCKER (image)
  # Docker:
  #   runs-on: ubuntu-latest
  #     needs: [build]
  #   environment:
  #     name: docker
  #   steps:
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{secrets.DOCKER_HUB_USERNAME}}
  #         password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}

  #     - name: Set up Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ./
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{secrets.DOCKER_HUB_USERNAME}}/portfolio:latest
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache
  #     - name: Image digest
  #       run: echo ${{steps.docker_build.outputs.digest}}

  # Heroku deployment
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [Docker]
  #   environment:
  #     name: production
    
  #   steps:
  #     - name: Pulling git repo
  #       uses: actions/checkout@v2
  #     - name: Deploying to Heroku
  #       uses: akhileshns/heroku-deploy@v3.12.12
  #       with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #         heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
  #         heroku_email: ${{secrets.HEROKU_EMAIL}}

                            # pull our github repo
                            # install heroku cli
                            # heroku login 
                            # add remote heroku 
                            # git push heroku main 

# Ubuntu Deployment 
#vpsDeploy:
# login to our ubuntu
# cd /app/src
# git pull
# systemctl restart api
